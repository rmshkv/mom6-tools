{"timestamp": 1697576559.577112, "stored_source_code": "# Velocity at Depth Levels\n\nThe goal of this notebook is the following:\n\n1) serve as an example of how to post-process CESM/MOM6 output;\n\n2) create time averages of Eulerian velocity fields at depth levels;\n%matplotlib inline\nfrom mom6_tools.MOM6grid import MOM6grid\nfrom mom6_tools.m6plot import xyplot\nfrom mom6_tools.DiagsCase import DiagsCase\nfrom mom6_tools import m6toolbox\nimport matplotlib.pyplot as plt\nfrom ncar_jobqueue import NCARCluster\nfrom dask.distributed import Client\nimport yaml, intake\nimport numpy as np\nimport xarray as xr\nfrom IPython.display import display, Markdown, Latex\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Read in the yaml file\ndiag_config_yml_path = \"diag_config.yml\"\ndiag_config_yml = yaml.load(open(diag_config_yml_path,'r'), Loader=yaml.Loader)\n\n# load avg dates\navg = diag_config_yml['Avg']\n\n# Create the case instance\ndcase = DiagsCase(diag_config_yml['Case'])\nDOUT_S = dcase.get_value('DOUT_S')\nif DOUT_S:\n  OUTDIR = dcase.get_value('DOUT_S_ROOT')+'/ocn/hist/'\nelse:\n  OUTDIR = dcase.get_value('RUNDIR')\n\nprint('Output directory is:', OUTDIR)\nprint('Casename is:', dcase.casename)\n# The following parameters must be set accordingly\n######################################################\n\n# create an empty class object\nclass args:\n  pass# create an empty class object\nclass args:\n  pass\n\nargs.start_date = avg['start_date']\nargs.end_date = avg['end_date']\nargs.casename = dcase.casename\nargs.monthly = dcase.casename+diag_config_yml['Fnames']['z']\nargs.static = dcase.casename+diag_config_yml['Fnames']['static']\nargs.savefigs = False\nargs.nw = 6 \n\nargs.start_date = avg['start_date']\nargs.end_date = avg['end_date']\nargs.casename = dcase.casename\nargs.monthly = dcase.casename+diag_config_yml['Fnames']['z']\nargs.static = dcase.casename+diag_config_yml['Fnames']['static']\nargs.savefigs = False\nargs.nw = 6 # requesting 6 workers\n# load mom6 grid\ngrd = MOM6grid(OUTDIR+args.static)\nparallel = False\nif args.nw > 1:\n  parallel = True\n  cluster = NCARCluster()\n  cluster.scale(args.nw)\n  client = Client(cluster)\nclient\n# load history files\n\ndef preprocess(ds):\n    ''' Return a dataset desired variables'''\n    variables = ['uo', 'vo', 'time', 'time_bounds']\n    return ds[variables]\n\nds = xr.open_mfdataset(OUTDIR+args.monthly, \\\n         parallel=True, data_vars='minimal', \\\n         coords='minimal', compat='override', preprocess=preprocess)\n# Select data\n%time \nds_sel = ds.sel(time=slice(args.start_date, args.end_date))\n# compute annual mean and then average in time\nds_ann = m6toolbox.weighted_temporal_mean_vars(ds_sel)\nuo = np.ma.masked_invalid(ds_ann.uo.mean('time').values)\nvo = np.ma.masked_invalid(ds_ann.vo.mean('time').values)\n### Zonal velocity\n%matplotlib inline\n# loop over depths \nkm = uo.shape[0]\nfor k in range(km):\n  # only shallower than 1000.0 m - this can be changed\n  if ds_ann['z_l'][k].values < 1000.0:\n    xyplot(uo[k,:],grd.geolon_u, grd.geolat_u, area=grd.areacello_cu,\n          title = 'Eastward vel., depth = {} m'.format(str(ds_ann['z_l'][k].values)),\n          extend='both',show= True)\n### Meridional velocity\n# loop over depths \nkm = vo.shape[0]\nfor k in range(km):\n  # only shallower than 1000.0 m - this can be changed\n  if ds_ann['z_l'][k].values < 1000.0:\n    xyplot(vo[k,:],grd.geolon_v, grd.geolat_v, area=grd.areacello_cv,\n          title = 'Northward vel., depth = {} m'.format(str(ds_ann['z_l'][k].values)),\n          extend='both',show= True)", "params": {"sname": "placeholder-sname", "subset_kwargs": {}}}